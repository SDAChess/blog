#+TITLE: TD 0 : Problems...and Graphs
#+DATE: 2021-02-24

* Exercice 1 : Path
1. To find a path or a chain between two vertices of a graph we can use Breadth-First search of Depth-First search. The advantage of the Depth-First search search is that it is simpler to use but the biggest inconveniant is that the DFS is recursive. The callstack being limited, it is possible that we overflow the stack on huge graphs. The Breadth first search is better because of it's iterative nature and it's capacity of finding the shortest path.
2. The Breadth First Search (BFS) version :
   #+BEGIN_SRC python :session
   def pathBFS(G, src, dest):
    P = [None] * G.order
    P[src] = -1
    if __pathBFS(G, P, src, dest):
        path = []
        while dest != -1:
            path.append(P[dest])
            dest = P[dest]
        path.reverse()
        return path
    return []

    def __pathBFS(G, P, src, dest):
        q = Queue()
        q.enqueue(src)
        while not q.isempty():
            s = q.dequeue()
            for adj in G.adjlist[s]:
                if P[adj] == None:
                    P[adj] = s
                    if adj == dest:
                        return True
                    else:
                        q.enqueue(adj)
        return False
   #+END_SRC

   The Depth First Search (DFS) verion :
   #+BEGIN_SRC python
   def pathDFS()
   #+END_SRC
